{"version":3,"sources":["webpack:///./src/views/Profile/profile.page.js","webpack:///./src/components/Page.js"],"names":["customProfileStyles","makeStyles","theme","mainBlock","marginTop","justifyContent","alignItems","alignSelf","textAlign","width","account","_defineProperty","breakpoints","down","maxWidth","marginBottom","title","textTransform","color","fontSize","fontWeight","letterSpacing","subTitle","ProfilePage","navigate","useNavigate","userInfo","useSelector","state","app","_useState2","_slicedToArray","useState","scrollEl","setScrollEl","customStyles","name","useEffect","scrollTop","React","createElement","Page","sessionStorage","getItem","Container","className","Box","Avatar","_extends","split","length","children","concat","sx","height","backgroundColor","marginLeft","marginRight","Card","CardHeader","subheader","CardContent","Grid","container","spacing","item","md","xs","TextField","fullWidth","label","value","variant","InputProps","readOnly","Typography","TableContainer","component","Paper","maxHeight","PerfectScrollbar","containerRef","ref","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","id","border","cursor","onClick","product_id","console","log","replace","scope","quantity","order_date","Button","forwardRef","_ref","_ref$title","rest","_objectWithoutProperties","_excluded","Helmet","propTypes","PropTypes","node","isRequired","string"],"mappings":"u1EAgCA,IAAMA,EAAsBC,aAAW,SAACC,GAAK,MAAM,CACjDC,UAAW,CACTC,UAAW,OACXC,eAAgB,SAChBC,WAAY,SACZC,UAAW,SACXC,UAAW,SACXC,MAAO,QAETC,QAAOC,EAAA,CACLN,eAAgB,UACfH,EAAMU,YAAYC,KAAK,MAAQ,CAC9BC,SAAU,OACVC,aAAc,SAGlBC,MAAKL,EAAA,CACHM,cAAe,YACfC,MAAO,UACPC,SAAU,OACVC,WAAY,MACZhB,UAAW,OACXW,aAAc,OACdM,cAAe,SACdnB,EAAMU,YAAYC,KAAK,MAAQ,CAC9BT,UAAW,IACXe,SAAU,OACVE,cAAe,UAGnBC,SAAQX,EAAA,CACNM,cAAe,YACfC,MAAO,UACPC,SAAU,OACVC,WAAY,MACZZ,UAAW,OACXJ,UAAW,OACXiB,cAAe,OACdnB,EAAMU,YAAYC,KAAK,MAAQ,CAC9BM,SAAU,OACVE,cAAe,UAGpB,IAsPcE,UApPK,WAClB,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,SAACC,GAAK,OAAKA,EAAMC,IAAIH,QAAQ,IAChBI,EAAAC,EAAVC,qBAAU,GAAnCC,EAAQH,EAAA,GAAEI,EAAWJ,EAAA,GACtBK,EAAenC,IAarB,IAXsBoC,EAuBtB,OANAC,qBAAU,WACJJ,IACFA,EAASK,UAAY,IAEzB,GAAG,CAACL,IAGFM,IAAAC,cAACC,IAAI,CAACzB,MAAM,WACT0B,eAAeC,QAAQ,SACtBJ,IAAAC,cAACI,IAAS,CAAC9B,SAAS,KAAK+B,UAAWV,EAAahC,WAC/CoC,IAAAC,cAACM,IAAG,CAACD,UAAWV,EAAazB,SAC1BgB,EAASU,MACRG,IAAAC,cAACO,IAAMC,EAAA,GA5Ba,IADVZ,EA8BSV,EAASU,MA7B7Ba,MAAM,KAAKC,OACX,CACLC,SAAU,GAAFC,OAAKhB,EAAKa,MAAM,KAAK,GAAG,KAG7B,CACLE,SAAU,GAAFC,OAAKhB,EAAKa,MAAM,KAAK,GAAG,IAAEG,OAAGhB,EAAKa,MAAM,KAAK,GAAG,KAuBf,CAC/BI,GAAI,CACF5C,MAAO,QACP6C,OAAQ,QACRnC,SAAU,OACVD,MAAO,QACPqC,gBAAiB,oBACjBC,WAAY,OACZC,YAAa,WAInBlB,IAAAC,cAACkB,IAAI,CAACL,GAAI,CAAEjD,UAAW,SACrBmC,IAAAC,cAACmB,IAAU,CACTC,UAAW,mCACX5C,MAAO,YAETuB,IAAAC,cAACqB,IAAW,KACVtB,IAAAC,cAACsB,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBzB,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB5B,IAAAC,cAACsB,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBzB,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB5B,IAAAC,cAAC4B,IAAS,CACRC,WAAS,EACTC,MAAM,OACNlC,KAAK,OACLmC,MAAO7C,aAAQ,EAARA,EAAiB,KACxB8C,QAAQ,WACRC,WAAY,CACVC,UAAU,MAIhBnC,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB5B,IAAAC,cAAC4B,IAAS,CACRC,WAAS,EACTC,MAAM,QACNlC,KAAK,QACLmC,MAAO7C,aAAQ,EAARA,EAAkB,MACzB8C,QAAQ,WACRC,WAAY,CACVC,UAAU,MAIhBnC,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB5B,IAAAC,cAAC4B,IAAS,CACRC,WAAS,EACTC,MAAM,eACNlC,KAAK,WACLmC,MAAO7C,EAAWA,EAAmB,SAAI,GACzC8C,QAAQ,WACRC,WAAY,CACVC,UAAU,MAIhBnC,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB5B,IAAAC,cAAC4B,IAAS,CACRC,WAAS,EACTC,MAAM,UACNlC,KAAK,UACLmC,MAAO7C,EAAWA,EAAkB,QAAI,GACxC8C,QAAQ,WACRC,WAAY,CACVC,UAAU,MAIhBnC,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB5B,IAAAC,cAAC4B,IAAS,CACRC,WAAS,EACTC,MAAM,UACNlC,KAAK,UACLmC,MAAO7C,EAAWA,EAAkB,QAAI,GACxC8C,QAAQ,WACRC,WAAY,CACVC,UAAU,YAW5BnC,IAAAC,cAACM,IAAG,CACFO,GAAI,CACFG,WAAY,OACZC,YAAa,SAGflB,IAAAC,cAACmC,IAAU,CAAC9B,UAAWV,EAAab,UAAU,iBAI9CiB,IAAAC,cAACoC,IAAc,CACbC,UAAWC,IACXzB,GAAI,CAAEjD,UAAW,OAAQ2E,UAAW,UAEpCxC,IAAAC,cAACwC,IAAgB,CACfC,aAAc,SAACC,GACbhD,EAAYgD,EACd,GAEA3C,IAAAC,cAAC2C,IAAK,CACJ9B,GAAI,CAAEvC,SAAU,CAAEqD,GAAI,QAASD,GAAI,WACnC,aAAW,gBAEX3B,IAAAC,cAAC4C,IAAS,KACR7C,IAAAC,cAAC6C,IAAQ,KACP9C,IAAAC,cAAC8C,IAAS,CAACC,MAAM,QAAO,SACxBhD,IAAAC,cAAC8C,IAAS,CAACC,MAAM,QAAO,YACxBhD,IAAAC,cAAC8C,IAAS,CAACC,MAAM,QAAO,UAG5BhD,IAAAC,cAACgD,IAAS,KACP9D,EAAuB,aAAE+D,KAAI,SAACC,GAAG,OAChCnD,IAAAC,cAAC6C,IAAQ,CACPM,IAAKD,EAAIE,GACTvC,GAAI,CACF,mCAAoC,CAAEwC,OAAQ,GAC9CC,OAAQ,WAEVC,QAAS,kBAjJPH,EAkJeF,EAAIM,WAlJfhF,EAkJ2B0E,EAAI1E,MAjJzDiF,QAAQC,IAAIlF,QAEZQ,EAAS,cAAD4B,OAAewC,EAAE,KAAAxC,OAAIpC,EAAMmF,QAAQ,KAAM,KAAKA,QADxC,iBACuD,MAHhD,IAACP,EAAI5E,CAkJqC,GAG3CuB,IAAAC,cAAC8C,IAAS,CAACT,UAAU,KAAKuB,MAAM,OAC7BV,EAAI1E,OAEPuB,IAAAC,cAAC8C,IAAS,CAACC,MAAM,QAAQG,EAAIW,UAC7B9D,IAAAC,cAAC8C,IAAS,CAACC,MAAM,QAAQG,EAAIY,YACpB,UAwDtB5D,eAAeC,QAAQ,SAWxB,KAVFJ,IAAAC,cAACI,IAAS,CAAC9B,SAAS,MAClByB,IAAAC,cAACsB,IAAI,CAACG,MAAI,EAACE,GAAI,GAAId,GAAI,CAAE7C,UAAW,SAAUJ,UAAW,QACvDmC,IAAAC,cAACmC,IAAU,CAACtB,GAAI,CAAEtC,aAAc,SAAU,gCAG1CwB,IAAAC,cAAC+D,IAAM,CAAC/B,QAAQ,YAAYuB,QAAS,kBAAMvE,EAAS,SAAS,GAAE,yBAQ3E,C,6sBC3TA,IAAMiB,EAAO+D,sBAAW,SAAAC,EAAoCvB,GAAQ,IAAzC/B,EAAQsD,EAARtD,SAAQuD,EAAAD,EAAEzF,aAAK,IAAA0F,EAAG,GAAEA,EAAKC,EAAIC,EAAAH,EAAAI,GACtD,OACEtE,IAAAC,cAAA,MAAAQ,EAAA,CAAKkC,IAAKA,GAASyB,GACjBpE,IAAAC,cAACsE,IAAM,KACLvE,IAAAC,cAAA,aAAQxB,IAETmC,EAGP,IAEAV,EAAKsE,UAAY,CACf5D,SAAU6D,IAAUC,KAAKC,WACzBlG,MAAOgG,IAAUG,QAGJ1E,K","file":"profile.page.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Page from \"../../components/Page\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Avatar,\r\n  Typography,\r\n  TextField,\r\n  useMediaQuery,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n} from \"@mui/material\";\r\n\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nimport Api from \"../../components/Api\";\r\nimport { privateApiGET } from \"../../components/PrivateRoute\";\r\nimport { setLoadingSpin } from \"../../redux/bookStore/booksSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nconst customProfileStyles = makeStyles((theme) => ({\r\n  mainBlock: {\r\n    marginTop: \"50px\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    alignSelf: \"center\",\r\n    textAlign: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  account: {\r\n    justifyContent: \"center\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      maxWidth: \"100%\",\r\n      marginBottom: \"10px\",\r\n    },\r\n  },\r\n  title: {\r\n    textTransform: \"uppercase\",\r\n    color: \"#3e4152\",\r\n    fontSize: \"28px\",\r\n    fontWeight: \"700\",\r\n    marginTop: \"34px\",\r\n    marginBottom: \"10px\",\r\n    letterSpacing: \"1.5px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: \"0\",\r\n      fontSize: \"20px\",\r\n      letterSpacing: \"0.5px\",\r\n    },\r\n  },\r\n  subTitle: {\r\n    textTransform: \"uppercase\",\r\n    color: \"#3e4152\",\r\n    fontSize: \"20px\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"left\",\r\n    marginTop: \"24px\",\r\n    letterSpacing: \"1px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: \"16px\",\r\n      letterSpacing: \"0.5px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ProfilePage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const userInfo = useSelector((state) => state.app.userInfo);\r\n  const [scrollEl, setScrollEl] = useState();\r\n  const customStyles = customProfileStyles();\r\n\r\n  function stringAvatar(name) {\r\n    if (name.split(\" \").length == 1) {\r\n      return {\r\n        children: `${name.split(\" \")[0][0]}`,\r\n      };\r\n    }\r\n    return {\r\n      children: `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`,\r\n    };\r\n  }\r\n\r\n  const handleBookView = (id, title) => {\r\n    console.log(title);\r\n    const regex = /[^a-zA-Z0-9-]/g;\r\n    navigate(`/app/books/${id}/${title.replace(/ /g, \"-\").replace(regex, \"\")}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (scrollEl) {\r\n      scrollEl.scrollTop = 100;\r\n    }\r\n  }, [scrollEl]);\r\n\r\n  return (\r\n    <Page title=\"Profile\">\r\n      {sessionStorage.getItem(\"token\") ? (\r\n        <Container maxWidth=\"md\" className={customStyles.mainBlock}>\r\n          <Box className={customStyles.account}>\r\n            {userInfo.name && (\r\n              <Avatar\r\n                {...stringAvatar(userInfo.name)}\r\n                sx={{\r\n                  width: \"100px\",\r\n                  height: \"100px\",\r\n                  fontSize: \"48px\",\r\n                  color: \"white\",\r\n                  backgroundColor: \"rgb(0,76,153,0.8)\",\r\n                  marginLeft: \"auto\",\r\n                  marginRight: \"auto\",\r\n                }}\r\n              />\r\n            )}\r\n            <Card sx={{ marginTop: \"20px\" }}>\r\n              <CardHeader\r\n                subheader={\"This information can't be edited\"}\r\n                title={\"PROFILE\"}\r\n              />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item md={12} xs={12}>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item md={4} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Name\"\r\n                          name=\"name\"\r\n                          value={userInfo?.[\"name\"]}\r\n                          variant=\"outlined\"\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={4} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Email\"\r\n                          name=\"email\"\r\n                          value={userInfo?.[\"email\"]}\r\n                          variant=\"outlined\"\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={4} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Phone Number\"\r\n                          name=\"phone_no\"\r\n                          value={userInfo ? userInfo[\"phone_no\"] : \"\"}\r\n                          variant=\"outlined\"\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={4} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"College\"\r\n                          name=\"college\"\r\n                          value={userInfo ? userInfo[\"college\"] : \"\"}\r\n                          variant=\"outlined\"\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={8} xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Address\"\r\n                          name=\"address\"\r\n                          value={userInfo ? userInfo[\"address\"] : \"\"}\r\n                          variant=\"outlined\"\r\n                          InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n            }}\r\n          >\r\n            <Typography className={customStyles.subTitle}>\r\n              Order History\r\n            </Typography>\r\n\r\n            <TableContainer\r\n              component={Paper}\r\n              sx={{ marginTop: \"35px\", maxHeight: \"350px\" }}\r\n            >\r\n              <PerfectScrollbar\r\n                containerRef={(ref) => {\r\n                  setScrollEl(ref);\r\n                }}\r\n              >\r\n                <Table\r\n                  sx={{ maxWidth: { xs: \"767px\", md: \"1024px\" } }}\r\n                  aria-label=\"simple table\"\r\n                >\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"left\">Title</TableCell>\r\n                      <TableCell align=\"left\">Quantity</TableCell>\r\n                      <TableCell align=\"left\">Date</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {userInfo[\"orderHistory\"].map((row) => (\r\n                      <TableRow\r\n                        key={row.id}\r\n                        sx={{\r\n                          \"&:last-child td, &:last-child th\": { border: 0 },\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() =>\r\n                          handleBookView(row.product_id, row.title)\r\n                        }\r\n                      >\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {row.title}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{row.quantity}</TableCell>\r\n                        <TableCell align=\"left\">{row.order_date}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </PerfectScrollbar>\r\n            </TableContainer>\r\n          </Box>\r\n\r\n          {/* <Box maxWidth={\"sm\"} sx={{ marginLeft: \"auto\", marginRight: \"auto\" }}>\r\n            <Typography className={customStyles.subTitle}>\r\n              Recently Visited\r\n            </Typography>\r\n\r\n            <TableContainer\r\n              component={Paper}\r\n              sx={{\r\n                marginTop: \"20px\",\r\n                maxHeight: \"350px\",\r\n              }}\r\n            >\r\n              <PerfectScrollbar\r\n                containerRef={(ref) => {\r\n                  setScrollEl(ref);\r\n                }}\r\n              >\r\n                <Table sx={{ maxWidth: \"md\" }} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell align=\"left\">Title</TableCell>\r\n                      <TableCell align=\"left\">Count</TableCell>\r\n                      <TableCell align=\"left\">Viewed_at</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {userInfo[\"visitHistory\"].map((row) => (\r\n                      <TableRow\r\n                        key={row.id}\r\n                        sx={{\r\n                          \"&:last-child td, &:last-child th\": { border: 0 },\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => handleProductView(row.id, row.title)}\r\n                      >\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {row.title}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{row.view_count}</TableCell>\r\n                        <TableCell align=\"left\">{row.visited_at}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </PerfectScrollbar>\r\n            </TableContainer>\r\n          </Box> */}\r\n        </Container>\r\n      ) : !sessionStorage.getItem(\"token\") ? (\r\n        <Container maxWidth=\"md\">\r\n          <Grid item xs={12} sx={{ textAlign: \"center\", marginTop: \"25%\" }}>\r\n            <Typography sx={{ marginBottom: \"20px\" }}>\r\n              Please sigin to view profile\r\n            </Typography>\r\n            <Button variant=\"contained\" onClick={() => navigate(\"/login\")}>\r\n              Click here to login\r\n            </Button>\r\n          </Grid>\r\n        </Container>\r\n      ) : null}\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n  return (\n    <div ref={ref} {...rest}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n    </div>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Page;\n"],"sourceRoot":""}